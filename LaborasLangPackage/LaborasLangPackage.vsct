<?xml version="1.0" encoding="utf-8"?>
<CommandTable xmlns="http://schemas.microsoft.com/VisualStudio/2005-10-18/CommandTable" xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <!--  This is the file that defines the actual layout and type of the commands.
        It is divided in different sections (e.g. command definition, command
        placement, ...), with each defining a specific set of properties.
        See the comment before each section for more details about how to
        use it. -->

  <!--  The VSCT compiler (the tool that translates this file into the binary 
        format that VisualStudio will consume) has the ability to run a preprocessor 
        on the vsct file; this preprocessor is (usually) the C++ preprocessor, so 
        it is possible to define includes and macros with the same syntax used 
        in C++ files. Using this ability of the compiler here, we include some files 
        defining some of the constants that we will use inside the file. -->

  <!--This is the file that defines the IDs for all the commands exposed by VisualStudio. -->
  <Extern href="stdidcmd.h"/>

  <!--This header contains the command ids for the menus provided by the shell. -->
  <Extern href="vsshlids.h"/>


  <!--Defines VK_INSERT -->
  <Extern href="virtkeys.h"/>
  
  <!--  Within this section you can specify the set of commands defined somewhere else that your  
        packages uses; for instance if your package uses the standard 'Copy' command, you don't  
        need to define it, because it is defined by the shell, but you have to use this section  
        of the VSCT file to notify the shell that your package uses it using this section. -->
  <!--  Note that with combo boxes we have effectively two commands in one. Below 
        we have two pairs of commands; 1st pair commandIDFontName and commandIDFontNameHandler, 
        2nd pair commandIDFontSize and commandIDFontSizeHandler. Note that: 
        
        - commandIDFontName and commandIDFontSize handle the displaying and setting of the font 
          name and font size respectively 
        - commandIDFontNameHandler and commandIDFontSizeHandler fill the drop down menus 
          with the available font names and font sizes respectively 
     -->
  <!-- Note also that VS will call QueryStatus only on commandIDFontName and  
       commandIDFontSize, but not on cmdFontNameHandler and commandIDFontSizeHandler whereas 
       Exec will be called on all four commands. 
       Note also that Exec will be called for commandIDFontName and commandIDFontSize for 
       two cases; first to get the current font name or size and second to 
       set the font name or size whereas the Exec call for commandIDFontNameHandler and  
       commandIDFontSizeHandler always have the same meaning - fill the drop down menu. 
       Finally, note that placement for the combo boxes is defined in the combo 
       section below by the priority and not in the CommandPlacements section. -->
  <UsedCommands>
    <UsedCommand guid="guidVSStd97" id="cmdidBold"/>
    <UsedCommand guid="guidVSStd97" id="cmdidItalic"/>
    <UsedCommand guid="guidVSStd97" id="cmdidUnderline"/>
    <UsedCommand guid="guidVSStd97" id="cmdidJustifyLeft"/>
    <UsedCommand guid="guidVSStd97" id="cmdidJustifyCenter"/>
    <UsedCommand guid="guidVSStd97" id="cmdidJustifyRight"/>
    <UsedCommand guid="guidVSStd97" id="cmdidFontName"/>
    <UsedCommand guid="guidVSStd97" id="cmdidFontSize"/>
    <UsedCommand guid="guidVSStd97" id="cmdidCut"/>
    <UsedCommand guid="guidVSStd97" id="cmdidCopy"/>
    <UsedCommand guid="guidVSStd97" id="cmdidPaste"/>
    <UsedCommand guid="guidVSStd97" id="cmdidDelete"/>
    <UsedCommand guid="guidVSStd2K" id="ECMD_INSERT"/>
    <UsedCommand guid="guidVSStd2K" id="ECMD_BULLETEDLIST"/>
  </UsedCommands>
  
  <KeyBindings>
     <!--Keybindings 
       To define a binding, you have to specify the sequence of keys to press to activate the command  
       (keystate); 
       
       Notice that Visual Studio has a lot of components and commands, so it can be difficult to find a  
       key binding not used by somebody else; if the key bindings are conflicting only one will be used 
       and one problem is that the shell will not inform the user that a conflict was found. The only  
       way to detect the problem is to start Visual Studio under debugger, try to execute any command  
       and look if there is a message in the output window about a duplicated accelerator found.--> 
    <KeyBinding guid="guidVSStd97" id="cmdidBold" editor="guidLaborasLangPackageEditorFactory" key1="B" mod1="Control"/>
    <KeyBinding guid="guidVSStd97" id="cmdidItalic" editor="guidLaborasLangPackageEditorFactory" key1="I" mod1="Control"/>
    <KeyBinding guid="guidVSStd97" id="cmdidUnderline" editor="guidLaborasLangPackageEditorFactory" key1="U" mod1="Control"/>
    <KeyBinding guid="guidVSStd97" id="cmdidJustifyLeft" editor="guidLaborasLangPackageEditorFactory" key1="L" mod1="Control"/>
    <KeyBinding guid="guidVSStd97" id="cmdidJustifyCenter" editor="guidLaborasLangPackageEditorFactory" key1="E" mod1="Control"/>
    <KeyBinding guid="guidVSStd97" id="cmdidJustifyRight" editor="guidLaborasLangPackageEditorFactory" key1="R" mod1="Control"/>
    <KeyBinding guid="guidVSStd2K" id="ECMD_INSERT" editor="guidLaborasLangPackageEditorFactory" key1="VK_INSERT"/>
  </KeyBindings>

  <Symbols>
    <!-- This is the package guid. -->
    <GuidSymbol name="guidLaborasLangPackagePkg" value="{643e7116-ca4e-459e-8323-4f89c3958f82}" />
    
    <!-- This is the guid used to group the menu commands together -->
    <GuidSymbol name="guidLaborasLangPackageCmdSet" value="{6d4b9a7d-cebc-409d-afaa-0e9f86f30981}">

    </GuidSymbol>
    
    <GuidSymbol name="guidLaborasLangPackageEditorFactory" value="{e37d924b-d43c-4cfd-9701-0dc4892b70c6}" />
    
    <GuidSymbol name="guidImages" value="{9e5badd8-f9f7-440d-9c28-bae2998ac93d}" >
      <IDSymbol name="bmpPic1" value="1" />
      <IDSymbol name="bmpPic2" value="2" />
      <IDSymbol name="bmpPicSearch" value="3" />
      <IDSymbol name="bmpPicX" value="4" />
      <IDSymbol name="bmpPicArrows" value="5" />
      <IDSymbol name="bmpPicStrikethrough" value="6" />
    </GuidSymbol>
  </Symbols>

</CommandTable>
